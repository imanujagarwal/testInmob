package com.inmobi.commons.core.c;

import com.inmobi.commons.core.network.e;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;













public class a
{
  private static final String a = a.class.getSimpleName();
  
  private static volatile a b;
  private static ScheduledExecutorService c;
  private static final Object d = new Object();
  
  public static a a()
  {
    a localA1;
    if ((localA1 = b) == null) {
      synchronized (d)
      {
        if ((localA1 = b) == null)
        {
          b = localA1 = new a();
        }
      }
    }
    return localA2;
  }
  
  private a() {
    c = Executors.newSingleThreadScheduledExecutor();
  }
  





  public final void a(final com.inmobi.commons.core.b.c paramC, final String paramString, final int paramInt1, final int paramInt2, final long paramLong, com.inmobi.commons.core.utilities.uid.d paramD, final b paramB)
  {
    if ((!com.inmobi.commons.core.utilities.d.a()) || (!com.inmobi.commons.a.a.g()))
    {
      paramB.a(paramC, false);
      return;
    }
    final com.inmobi.commons.core.network.c localC = new com.inmobi.commons.core.network.c("POST", paramString, false, paramD);
    HashMap localHashMap1;
    (localHashMap1 = new HashMap()).put("payload", 
    



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































      b);localC.c(localHashMap1);
    if (paramInt1 - paramInt2 > 0) {
      HashMap localHashMap2;
      (localHashMap2 = new HashMap()).put("X-im-retry-count", String.valueOf(paramInt1 - paramInt2));
      localC.a(localHashMap2);
    }
    



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































    u = false;long l = paramInt2 != paramInt1 ? paramLong : 0L;c.schedule(new Runnable()
    {
      public final void run()
      {
        com.inmobi.commons.core.network.d localD;
        if ((localD = new e(localC).a()).a()) {
          if (paramInt2 > 1) {
            a.b();new StringBuilder("Unable to send trc events to server: ").append(localD.b()).append(". Will retry");
            a.a(a.this, paramC, paramString, paramInt1, paramInt2 - 1, paramLong, paramB, h);return;
          }
          h.a(paramC, true);return;
        }
        
        h.a(paramC); } }, l, TimeUnit.SECONDS);
  }
}
