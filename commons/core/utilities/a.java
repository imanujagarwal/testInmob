package com.inmobi.commons.core.utilities;

import android.app.Activity;
import android.app.Application;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Message;
import com.inmobi.commons.core.e.b;
import java.lang.ref.WeakReference;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;














public class a
{
  private static final String a = a.class.getSimpleName();
  




  private static List<b> b = new ArrayList();
  private static Object c;
  private static boolean d = false;
  
  private static HandlerThread e = null;
  
  private static final Object f = new Object();
  private static volatile a g;
  
  public static a a() {
    a localA1;
    if ((localA1 = g) == null) {
      synchronized (f)
      {
        if ((localA1 = g) == null)
        {
          g = localA1 = new a();
        }
      }
    }
    return localA2;
  }
  





































































































































































  public static void b()
  {
    d = true;
  }
  
  public static void c() {
    d = false;
  }
  
  static class a extends Handler {
    boolean a = true;
    
    a(Looper paramLooper) {
      super();
    }
    
    public final void handleMessage(Message paramMessage)
    {
      if (a.g()) {
        return;
      }
      
      if ((what == 1001) && (a)) {
        a = false;
        a.a(false);
        a.f();return; }
      if ((what == 1002) && (!a)) {
        a = true;
        a.a(true);
        a.f();
      }
    }
  }
  
  public final void a(b paramB)
  {
    b.add(paramB);
    if (b.size() == 1) {
      paramB = this;
      




































































































































































































































































































































































































































































































































































































































































































































































































































































































      if (com.inmobi.commons.a.a.a())
      {







        (a.e = new HandlerThread("ApplicationFocusChangeObserverHandler")).start();
        
        Object localObject1 = Application.class.getDeclaredClasses();
        Object localObject2 = null;
        
        int i = (localObject1 = localObject1).length; for (int j = 0; j < i; j++) { Object localObject3;
          if ((localObject3 = localObject1[j]).getSimpleName().equalsIgnoreCase("ActivityLifecycleCallbacks"))
          {
            new Class[1][0] = localObject3;
            localObject2 = localObject3;
          }
        }
        
        c = Proxy.newProxyInstance(localObject2.getClassLoader(), new Class[] { localObject2 }, new InvocationHandler()
        {
          private final Handler b = new a.a(a.d().getLooper());
          






          private WeakReference<Activity> c;
          







          public final Object invoke(Object arg1, Method arg2, Object[] paramAnonymousArrayOfObject)
            throws Throwable
          {
            if (paramAnonymousArrayOfObject != null) {
              switch (???.getName()) {
              case "onActivityResumed": 
              case "onActivityStarted": 
                ??? = (Activity)paramAnonymousArrayOfObject[0];
                
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































                ??? = this; if ((c == null) || (c.get() != ???)) {
                  c = new WeakReference(???);
                }
                
                b.removeMessages(1001);
                b.sendEmptyMessage(1002);break;
              case "onActivityStopped": 
                ??? = (Activity)paramAnonymousArrayOfObject[0];
                























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































                ??? = this; if ((c != null) && (c.get() == ???)) {
                  b.sendEmptyMessageDelayed(1001, 3000L);
                }
                break;
              }
            }
            return null;




















































































































































































































































































































































































































































































































          }
          




















































































































































































































































































































































































































































































































        });
        localObject1 = (Application)com.inmobi.commons.a.a.b();
        if (c != null)
        {
          try
          {
            Application.class.getMethod("registerActivityLifecycleCallbacks", new Class[] { localObject2 }).invoke(localObject1, new Object[] { c }); return;
          }
          catch (NoSuchMethodException localNoSuchMethodException) {}catch (InvocationTargetException localInvocationTargetException) {}catch (IllegalAccessException localIllegalAccessException) {}catch (Exception localException1)
          {
            try
            {
              HashMap localHashMap;
              


              (localHashMap = new HashMap()).put("type", "GenericException");
              localHashMap.put("message", localException1.getMessage());
              b.a();b.a("root", "ExceptionCaught", localHashMap); return;
            }
            catch (Exception localException2) {
              new StringBuilder("Error in submitting telemetry event : (").append(localException1.getMessage()).append(")");
            }
          }
        }
      }
    }
  }
  
  private a() {}
  
  public static abstract interface b
  {
    public abstract void a(boolean paramBoolean);
  }
}
