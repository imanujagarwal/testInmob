package com.inmobi.commons.core.utilities.a;

import android.annotation.SuppressLint;
import android.util.Base64;
import com.inmobi.commons.core.d.c;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.RSAPublicKeySpec;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;







public class b
{
  private static final String a = b.class.getSimpleName();
  private static String b = "AES";
  
  private static String c = "AES/CBC/PKCS7Padding";
  private static byte[] d;
  
  public b() {}
  
  public static String a(String paramString1, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3, String paramString2, String paramString3)
  {
    try {
      byte[] arrayOfByte = b(paramString1 = b(paramString1.getBytes("UTF-8"), paramArrayOfByte1, paramArrayOfByte2), paramArrayOfByte3);
      

      paramString1 = a(paramString1);
      arrayOfByte = a(arrayOfByte);
      


      paramArrayOfByte2 = a(paramArrayOfByte2);
      paramArrayOfByte1 = a(paramArrayOfByte1);
      paramArrayOfByte3 = a(paramArrayOfByte3);
      





      paramArrayOfByte1 = a(a(a(a(paramArrayOfByte1, paramArrayOfByte3), paramArrayOfByte2), paramString3, paramString2));
      

      paramString1 = a(paramString1, arrayOfByte);
      
      paramString1 = Base64.encode(a(paramArrayOfByte1, paramString1), 8);
      return new String(paramString1);
    }
    catch (Exception paramString1) {
      new StringBuilder("SDK encountered unexpected error in generating secret message; ").append(paramString1.getMessage());
    }
    
    return null;
  }
  
  @SuppressLint({"TrulyRandom"})
  private static byte[] b(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3) {
    byte[] arrayOfByte = null;
    paramArrayOfByte2 = new SecretKeySpec(paramArrayOfByte2, b);
    paramArrayOfByte3 = new IvParameterSpec(paramArrayOfByte3);
    
    try
    {
      Cipher localCipher;
      (localCipher = Cipher.getInstance(c)).init(1, paramArrayOfByte2, paramArrayOfByte3);
      
      localCipher.init(1, paramArrayOfByte2, paramArrayOfByte3);
      
      localCipher.init(1, paramArrayOfByte2, paramArrayOfByte3);
      arrayOfByte = localCipher.doFinal(paramArrayOfByte1);
    }
    catch (Throwable paramArrayOfByte1) {
      new StringBuilder("SDK encountered unexpected error in getting encrypted AES bytes; ").append(paramArrayOfByte1.getMessage());
    }
    return arrayOfByte;
  }
  
  private static byte[] b()
  {
    try
    {
      Object localObject;
      (localObject = KeyGenerator.getInstance("AES")).init(128, new SecureRandom());
      
      if ((localObject = ((KeyGenerator)localObject).generateKey()) != null) {
        return ((SecretKey)localObject).getEncoded();
      }
    }
    catch (Exception localException) {
      new StringBuilder("SDK encountered unexpected error in generating AES public key; ").append(localException.getMessage());
    }
    return null;
  }
  
  private static byte[] b(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    byte[] arrayOfByte = null;
    paramArrayOfByte2 = new SecretKeySpec(paramArrayOfByte2, 0, paramArrayOfByte2.length, "HmacSHA1");
    
    try
    {
      Mac localMac;
      (localMac = Mac.getInstance("HmacSHA1")).init(paramArrayOfByte2);
      arrayOfByte = localMac.doFinal(paramArrayOfByte1);
    }
    catch (NoSuchAlgorithmException localNoSuchAlgorithmException) {}catch (InvalidKeyException localInvalidKeyException) {}
    


    return arrayOfByte;
  }
  
  public static byte[] a(byte[] paramArrayOfByte)
  {
    long l = paramArrayOfByte.length;
    (
    
      localObject = ByteBuffer.allocate(8)).order(ByteOrder.LITTLE_ENDIAN);
    ((ByteBuffer)localObject).putLong(l);
    
    byte[] arrayOfByte;
    Object localObject = new byte[(arrayOfByte = ((ByteBuffer)localObject).array()).length + paramArrayOfByte.length];
    System.arraycopy(arrayOfByte, 0, localObject, 0, arrayOfByte.length);
    System.arraycopy(paramArrayOfByte, 0, localObject, arrayOfByte.length, paramArrayOfByte.length);
    return localObject;
  }
  


  public static byte[] a(byte[] paramArrayOfByte, String paramString1, String paramString2)
  {
    byte[] arrayOfByte = null;
    paramString2 = new BigInteger(paramString2, 16);
    paramString1 = new BigInteger(paramString1, 16);
    
    try
    {
      KeyFactory localKeyFactory = KeyFactory.getInstance("RSA");
      paramString1 = new RSAPublicKeySpec(paramString2, paramString1);
      paramString1 = (RSAPublicKey)localKeyFactory.generatePublic(paramString1);
      
      (
        paramString2 = Cipher.getInstance("RSA/ECB/nopadding")).init(1, paramString1);
      arrayOfByte = paramString2.doFinal(paramArrayOfByte);
    }
    catch (Throwable paramString1) {
      new StringBuilder("SDK encountered unexpected error in getting encrypted RSA bytes; ").append(paramString1.getMessage());
    }
    return arrayOfByte;
  }
  

  public static byte[] a(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    byte[] arrayOfByte = new byte[paramArrayOfByte1.length + paramArrayOfByte2.length];
    System.arraycopy(paramArrayOfByte1, 0, arrayOfByte, 0, paramArrayOfByte1.length);
    System.arraycopy(paramArrayOfByte2, 0, arrayOfByte, paramArrayOfByte1.length, paramArrayOfByte2.length);
    return arrayOfByte;
  }
  

  public static synchronized byte[] a()
  {
    a localA = new a();
    
    long l = System.currentTimeMillis() / 1000L - 
    

















































































































































































































































































































































































































































































































































































































































































































































































































































































      a.b("last_generated_ts", 0L);
    try
    {
      String str;
      if (l > 86400L)
      {
        str = Base64.encodeToString(b.d = b(), 0);
        localA.a(str);
      }
      else if (d == null) {
        str = 
        












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































          a.c("aes_public_key");
        try
        {
          d = Base64.decode(str, 0);
        }
        catch (IllegalArgumentException localIllegalArgumentException)
        {
          str = Base64.encodeToString(b.d = b(), 0);
          localA.a(str);
        }
      }
    }
    catch (Exception localException) {}
    

    return d;
  }
  
  public static byte[] a(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3) {
    byte[] arrayOfByte = null;
    paramArrayOfByte2 = new SecretKeySpec(paramArrayOfByte2, b);
    
    try
    {
      Cipher localCipher;
      (localCipher = Cipher.getInstance(c)).init(2, paramArrayOfByte2, new IvParameterSpec(paramArrayOfByte3));
      arrayOfByte = localCipher.doFinal(paramArrayOfByte1);
    }
    catch (Throwable paramArrayOfByte1) {
      new StringBuilder("SDK encountered unexpected error in decrypting AES response; ").append(paramArrayOfByte1.getMessage());
    }
    
    return arrayOfByte;
  }
  
  public static byte[] a(int paramInt) {
    paramInt = new byte[paramInt];
    try
    {
      new SecureRandom().nextBytes(paramInt);
    }
    catch (Exception localException) {
      new StringBuilder("SDK encountered unexpected error in generating crypto key; ").append(localException.getMessage());
    }
    return paramInt;
  }
}
