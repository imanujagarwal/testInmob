package com.inmobi.commons.core.utilities;

import android.annotation.SuppressLint;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.ConnectivityManager;
import android.net.ConnectivityManager.NetworkCallback;
import android.net.Network;
import android.net.NetworkInfo;
import android.os.Build.VERSION;
import android.os.PowerManager;
import com.inmobi.commons.a.a;
import java.util.HashMap;
import java.util.concurrent.CopyOnWriteArrayList;









public class g
{
  private static final String a = g.class.getSimpleName();
  private static HashMap<String, CopyOnWriteArrayList<b>> b = new HashMap();
  private static HashMap<String, a> c = new HashMap();
  private static HashMap<String, ConnectivityManager.NetworkCallback> d = new HashMap();
  
  private static final Object e = new Object();
  private static volatile g f;
  
  public static g a() {
    g localG1;
    if ((localG1 = f) == null) {
      synchronized (e)
      {
        if ((localG1 = f) == null)
        {
          f = localG1 = new g();
        }
      }
    }
    return localG2;
  }
  















  public final void a(b paramB)
  {
    if (Build.VERSION.SDK_INT < 28) {
      a("android.net.conn.CONNECTIVITY_CHANGE", paramB);return;
    }
    a("SYSTEM_CONNECTIVITY_CHANGE", paramB);
  }
  







































  private static void b(boolean paramBoolean, String paramString)
  {
    if ((paramString = (CopyOnWriteArrayList)b.get(paramString)) != null) {
      for (b localB : paramString) {
        try {
          localB.a(paramBoolean);

        }
        catch (Exception localException)
        {
          new StringBuilder("SDK encountered unexpected error in SystemBroadcastObserver.onServiceChanged event handler; ").append(localException.getMessage());
        }
      }
    }
  }
  







































  static final class a
    extends BroadcastReceiver
  {
    private static final String a = a.class.getSimpleName();
    
    a() {}
    
    @SuppressLint({"MissingPermission"})
    public final void onReceive(Context paramContext, Intent paramIntent) {
      try {
        boolean bool = false;
        if ((paramIntent != null) && (paramIntent.getAction() != null)) {
          if ("android.net.conn.CONNECTIVITY_CHANGE".equals(paramIntent.getAction()))
          {
            if ((paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity")) != null)
            {
              if (((paramContext = paramContext.getActiveNetworkInfo()) != null) && (paramContext.isConnected())) {
                bool = true;
              }
            }
          } else if ("android.os.action.DEVICE_IDLE_MODE_CHANGED".equalsIgnoreCase(paramIntent.getAction())) {
            bool = 
            
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































              ((paramContext = (PowerManager)paramContext.getSystemService("power")) != null) && 
              (Build.VERSION.SDK_INT >= 23) && 
              (paramContext.isDeviceIdleMode());
          } else if ("android.intent.action.USER_PRESENT".equals(paramIntent.getAction())) {
            bool = true;
          }
          
          g.a(bool, paramIntent.getAction());
          new StringBuilder().append(paramIntent.getAction()).append(" Availability:").append(bool);
        }
        return;
      }
      catch (Exception localException) {
        new StringBuilder("SDK encountered unexpected error in SystemBroadReceiver.onReceive handler; ").append(localException.getMessage());
      }
    }
  }
  
  public final void a(String paramString, b paramB)
  {
    Object localObject1;
    if ((localObject1 = (CopyOnWriteArrayList)b.get(paramString)) != null) {
      ((CopyOnWriteArrayList)localObject1).add(paramB);
    }
    else {
      (localObject1 = new CopyOnWriteArrayList()).add(paramB);
    }
    b.put(paramString, localObject1);
    
    if (((CopyOnWriteArrayList)localObject1).size() == 1) {
      paramB = paramString;paramString = this;
      























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































      if ((localObject1 = a.b()) != null) {
        if ("SYSTEM_CONNECTIVITY_CHANGE".equals(paramB))
        {
          if ((localObject2 = (ConnectivityManager)((Context)localObject1).getSystemService("connectivity")) != null) {
            paramString = new ConnectivityManager.NetworkCallback()
            {
              public final void onAvailable(Network paramAnonymousNetwork)
              {
                super.onAvailable(paramAnonymousNetwork);
                g.a(true);
              }
              
              public final void onLost(Network paramAnonymousNetwork)
              {
                super.onLost(paramAnonymousNetwork);
                g.a(false);




















































































































































































































































































































































































































































































































              }
              




















































































































































































































































































































































































































































































































            };
            d.put(paramB, paramString);
            ((ConnectivityManager)localObject2).registerDefaultNetworkCallback(paramString);
          }
          return; }
        Object localObject2 = new a();
        c.put(paramB, localObject2);
        ((Context)localObject1).registerReceiver((BroadcastReceiver)localObject2, new IntentFilter(paramB));
      }
    }
  }
  
  @SuppressLint({"NewApi"})
  public static void a(b paramB, String paramString)
  {
    CopyOnWriteArrayList localCopyOnWriteArrayList;
    if ((localCopyOnWriteArrayList = (CopyOnWriteArrayList)b.get(paramString)) != null) {
      localCopyOnWriteArrayList.remove(paramB);
      if (localCopyOnWriteArrayList.size() == 0) {
        paramB = paramString;
        























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































        if ((paramString = a.b()) != null) {
          if (("SYSTEM_CONNECTIVITY_CHANGE".equals(paramB)) && 
            (d.get(paramB) != null))
          {
            if ((paramString = (ConnectivityManager)paramString.getSystemService("connectivity")) != null) {
              paramString.unregisterNetworkCallback((ConnectivityManager.NetworkCallback)d.get(paramB));
              d.remove(paramB);
            }
            return; } if (c.get(paramB) != null)
          {
            paramString.unregisterReceiver((BroadcastReceiver)c.get(paramB));
            c.remove(paramB);
          }
        }
      }
    }
  }
  
  public g() {}
  
  public static abstract interface b
  {
    public abstract void a(boolean paramBoolean);
  }
}
